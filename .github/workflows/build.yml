name: build

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'version'
        required: true
        default: '1.0.0'

jobs:
  build:
    runs-on: ubuntu-latest

    # The maximum number of minutes to let a workflow run
    # before GitHub automatically cancels it. Default: 360
    timeout-minutes: 60

    steps:
      - name: Checkout code
        uses: actions/checkout@v2.4.0

      - name: Prepare tags
        id: prepare
        run: |
          VERSION=${{ github.event.inputs.version }}
          VERSION_MAJOR=$(echo ${VERSION} | cut -f1 -d.)
          VERSION_MINOR="$(echo ${VERSION} | cut -f2 -d.)"

          PROJECT_NAME=netflow

          IMAGE_VND=klay
          IMAGE_NAME="${IMAGE_VND}/${PROJECT_NAME}"
          IMAGE_TAG=${VERSION}

          FQIN="${IMAGE_NAME}:${IMAGE_TAG}"

          if [[ ${GITHUB_REF} == refs/heads/* ]]; then
            ACTION_REF=${GITHUB_REF:11}
          elif [[ ${GITHUB_REF} == refs/tags/* ]]; then
            ACTION_REF=${GITHUB_REF:10}
          file

          TAGS="${FQIN},${IMAGE_NAME}:${VERSION_MAJOR}.${VERSION_MINOR},${IMAGE_NAME}:${VERSION_MAJOR},${IMAGE_NAME}:${VERSION}-bullseye,${IMAGE_NAME}:${VERSION_MAJOR}.${VERSION_MINOR}-bullseye,${IMAGE_NAME}:${VERSION_MAJOR}-bullseye,${IMAGE_NAME}:bullseye,${IMAGE_NAME}:latest"

          echo ::set-output name=build_args::VERSION=${VERSION},BUILD_ID=${ACTION_REF}
          echo ::set-output name=image-name::${IMAGE_NAME}
          echo ::set-output name=tags::${TAGS}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          platforms: linux/386,linux/amd64,linux/arm64,linux/arm/v6,linux/arm/v7,linux/ppc64le,linux/s390x
          push: ${{ github.event_name != 'pull_request' }}
          build-args: ${{ steps.prepare.outputs.build_args }}
          tags: ${{ steps.prepare.outputs.tags }}

      - name: Clear
        if: always()
        run: |
          rm -rf ${HOME}/.docker/config.json
